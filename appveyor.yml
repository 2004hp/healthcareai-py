environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:

    - PYTHON_VERSION: 3.5-x64
      MINICONDA: C:\Miniconda35-x64

init:
  - "ECHO %PYTHON_VERSION% %MINICONDA%"

install:

#  - ECHO "Filesystem root:"
#  - ps: "ls \"C:/\""
#
#  - ECHO "Installed SDKs:"
#  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""


  #- conda config --set always_yes yes --set changeps1 no
  #- conda update -q conda

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  #- ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }
  # Previous line gives error in conda
  - powershell .\\appveyor\\install.ps1

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  #- "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  #- "pip install --disable-pip-version-check --user --upgrade pip"

  # We need wheel installed to build wheels
  - "conda install wheel --yes"

  # Upgrade setuptools
  - "conda update --yes setuptools"

  # Install pyodbc from github (doesn't work with 3.5 from PyPI)
  #- "clone https://github.com/mkleehammer/pyodbc.git"
  #- "setup.py build"
  #- "setup.py install"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture

  #- "%CMD_IN_ENV% pip install -r dev-requirements.txt"
  # Install in order of list in dev-requirements.txt
  - "cat dev-requirements.txt | xargs -n 1 -L 1 conda install --yes"

build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python setup.py build"

test_script:
  # From here: https://github.com/rmcgibbo/python-appveyor-conda-example/blob/master/appveyor.yml
  - "%CMD_IN_ENV% conda build conda-recipe --quiet"

  # Run the project tests
  - "%CMD_IN_ENV% python setup.py nosetests"

after_test:
  # If tests are successful, create binary packages for the project.
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - "%CMD_IN_ENV% python setup.py bdist_wininst"
  - "%CMD_IN_ENV% python setup.py bdist_msi"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#